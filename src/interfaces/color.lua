-- local D_type=_ENV.D_type;
local app=_ENV.app;
local MouseButton=_ENV.MouseButton;
local import_module=_ENV.import_module;
-- local return_true = _ENV.return_true;
local TEXTS=_ENV.TEXTS;


local harmonies_color=import_module("color.harmonies").HARMONIES_COLOR();
local transforms_color=import_module("color.transforms").TRANSFORMS();

local onClick_functions = {
	mananger_event_set_color=function(_, ev)
		if ev.button==MouseButton.LEFT then
			app.fgColor=ev.color;
		elseif ev.button==MouseButton.RIGHT then
			app.bgColor=ev.color;
		end;
	end;
	combobox_harmonies=function(map, config, _ ) --> (map, config, Event)
		local currentColor=config.user_interface.data.color_picker;
		local colors=nil;
		if (map.analogs==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:analogs(currentColor);
		elseif (map.complementary==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:complementary(currentColor);
		elseif (map.split_complementary==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:split_complementary(currentColor);
		elseif (map.compounds==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:compounds(currentColor);
		elseif (map.squares==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:squares(currentColor);
		elseif (map.complementary_doubles==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:complementary_doubles(currentColor);
		elseif (map.monochromaticos==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:monochromaticos(currentColor);
		elseif (map.shades==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:shades(currentColor);
		elseif (map.tones==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:tones(currentColor);
		elseif (map.triad==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:triad(currentColor);
		elseif (map.complementary_triad==config.user_interface.data.combobox_harmonies) then
			colors=harmonies_color:complementary_triad(currentColor);
		end;
		if type(colors)~="nil" then
			config.user_interface:modify{
				id="shades_picker";
				colors=colors;
			};
		end;
	end;
	submit_color_picker_blending=function(config)
		if type(config.data.color_picker_blending_one)~="userdata" then return nil end
		if type(config.data.color_picker_blending_two)~="userdata" then return nil end
		if type(config.data.balance_blend_colors)~="number" then return nil end
		local new_color=transforms_color:blend_colors(config.data.color_picker_blending_one, config.data.color_picker_blending_two, config.data.balance_blend_colors)
		if type(new_color)~="userdata" then return nil end
		config.user_interface:modify{
			id="shades_picker_blending";
			colors={new_color};
		};
	end;
	submit_color_picker_gradient=function(config)
		if type(config.data.color_picker_gradient_one)~="userdata" then return nil end
		if type(config.data.color_picker_gradient_two)~="userdata" then return nil end
		if type(config.data.number_colors_gradient_colors)~="number" then return nil end
		local new_colors=transforms_color:gradient_generator(config.data.color_picker_gradient_one, config.data.color_picker_gradient_two, config.data.number_colors_gradient_colors-1)
		if type(new_colors)~="table" then return nil end
		config.user_interface:modify{
			id="shades_picker_gradient";
			colors=new_colors;
		};
	end;
	submit_contrast=function (config)
		if type(config.data.color_picker_contrast_one)~="userdata" then return nil end
		if type(config.data.color_picker_contrast_two)~="userdata" then return nil end
		local contrast, validate = transforms_color:contrast(config.data.color_picker_contrast_one, config.data.color_picker_contrast_two);
		local languages_option=_ENV.languages_option;
		config.user_interface:modify{
			id="label_current_contrast";
			text=(tostring(TEXTS.color.current_contrast.text[languages_option])..tostring(contrast));
		}:modify{
			id="label_text_contrast";
			text=(tostring(TEXTS.color.text_contrast.text[languages_option])..tostring(TEXTS.genericts_component.boolean[tostring(validate.text)][languages_option]));
		}:modify{
			id="label_text_best_contrast";
			text=(tostring(TEXTS.color.text_best_contrast.text[languages_option])..tostring(TEXTS.genericts_component.boolean[tostring(validate.text_best)][languages_option]));
		}:modify{
			id="label_color_blind_contrast";
			text=(tostring(TEXTS.color.color_blind_contrast.text[languages_option])..tostring(TEXTS.genericts_component.boolean[tostring(validate.color_blind)][languages_option]));
		}
	end;
};

return function (global_functions)
	return {
		title=TEXTS.color.title;
		onclose=(function () end);
		structure={
			{
				type="separator";
				content={
					id="separator_color";
					text=TEXTS.color.separator_color.text;
				};
			},
			{
				type="check";
				content={
					id="check_harmonies";
					text=TEXTS.color.check_harmonies.text;
					newrow=true;
					onclick=global_functions.factory_check_toogle({
						"color_picker",
						"combobox_harmonies",
						"submit_combobox_harmonies",
						"shades_picker",
						"submit_color_foreground_picker",
						"submit_color_background_picker",
					});
				};
			},
			{
				type="color";
				content={
					id="color_picker";
					visible=false;
					color=app.fgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker");
				};
			},
			{
				type="combobox";
				content={
					id="combobox_harmonies";
					visible=false;
					option="";
					options=TEXTS.color.combobox_harmonies.options;
					text=TEXTS.color.combobox_harmonies.text;
					onclick=onClick_functions.combobox_harmonies;
				};
			};
			{
				type="shades";
				content={
					id="shades_picker";
					visible=false;
					colors={};
					newrow=true;
					onclick=onClick_functions.mananger_event_set_color;
				};
			},
			{
				type="check";
				content={
					id="check_blending";
					text=TEXTS.color.check_blending.text;
					newrow=true;
					onclick=global_functions.factory_check_toogle({
						"color_picker_blending_one",
						"submit_color_foreground_picker_blending_one",
						"submit_color_background_picker_blending_one",
						"color_picker_blending_two",
						"submit_color_foreground_picker_blending_two",
						"submit_color_background_picker_blending_two",
						"label_balance_blend_colors",
						"balance_blend_colors",
						"submit_color_picker_blending",
						"label_result_blend_colors",
						"shades_picker_blending",
					});
				};
			},
			{
				type="color";
				content={
					id="color_picker_blending_one";
					visible=false;
					color=app.fgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_blending_one";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_blending_one");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_blending_one";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_blending_one");
				};
			},
			{
				type="color";
				content={
					id="color_picker_blending_two";
					visible=false;
					color=app.bgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_blending_two";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_blending_two");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_blending_two";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_blending_two");
				};
			},
			{
				type="label";
				content={
					id="label_result_blend_colors";
					text=TEXTS.color.result_blend_colors.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="shades";
				content={
					id="shades_picker_blending";
					visible=false;
					colors={};
					newrow=true;
					onclick=onClick_functions.mananger_event_set_color;
				};
			},
			{
				type="label";
				content={
					id="label_balance_blend_colors";
					text=TEXTS.color.balance_blend_colors.text;
					selected=false;
					newrow=false;
					visible=false;
				};
			},
			{
				type="slider";
				content={
					id="balance_blend_colors";
					selected=false;
					newrow=false;
					visible=false;
					min=0;
					max=100;
					value=50;
				};
			},
			{
				type="button";
				content={
					id="submit_color_picker_blending";
					text=TEXTS.color.submit_blend_colors.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=onClick_functions.submit_color_picker_blending;
				};
			},
			{
				type="check";
				content={
					id="check_gradient";
					text=TEXTS.color.check_gradient.text;
					newrow=true;
					onclick=global_functions.factory_check_toogle({
						"color_picker_gradient_one",
						"submit_color_foreground_picker_gradient_one",
						"submit_color_background_picker_gradient_one",
						"color_picker_gradient_two",
						"submit_color_foreground_picker_gradient_two",
						"submit_color_background_picker_gradient_two",
						"label_result_gradient_colors",
						"shades_picker_gradient",
						"label_number_colors_gradient_colors",
						"number_colors_gradient_colors",
						"submit_color_picker_gradient",
					});
				};
			},
			{
				type="color";
				content={
					id="color_picker_gradient_one";
					visible=false;
					color=app.fgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_gradient_one";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_gradient_one");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_gradient_one";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_gradient_one");
				};
			},
			{
				type="color";
				content={
					id="color_picker_gradient_two";
					visible=false;
					color=app.bgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_gradient_two";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_gradient_two");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_gradient_two";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_gradient_two");
				};
			},
			{
				type="label";
				content={
					id="label_result_gradient_colors";
					text=TEXTS.color.result_blend_colors.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="shades";
				content={
					id="shades_picker_gradient";
					visible=false;
					colors={};
					newrow=true;
					onclick=onClick_functions.mananger_event_set_color;
				};
			},
			{
				type="label";
				content={
					id="label_number_colors_gradient_colors";
					text=TEXTS.color.number_of_colors.text;
					selected=false;
					newrow=false;
					visible=false;
				};
			},
			{
				type="slider";
				content={
					id="number_colors_gradient_colors";
					selected=false;
					newrow=false;
					visible=false;
					min=4;
					max=13;
					value=6;
				};
			},
			{
				type="button";
				content={
					id="submit_color_picker_gradient";
					text=TEXTS.color.submit_blend_colors.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=onClick_functions.submit_color_picker_gradient;
				};
			},
			{
				type="check";
				content={
					id="check_contrast";
					text=TEXTS.color.check_contrast.text;
					newrow=true;
					onclick=global_functions.factory_check_toogle({
						"color_picker_contrast_one",
						"submit_color_foreground_picker_contrast_one",
						"submit_color_background_picker_contrast_one",
						"color_picker_contrast_two",
						"submit_color_foreground_picker_contrast_two",
						"submit_color_background_picker_contrast_two",
						"label_current_contrast",
						"label_text_contrast",
						"label_text_best_contrast",
						"label_color_blind_contrast",
						"submit_color_picker_contrast",
					});
				};
			},
			{
				type="color";
				content={
					id="color_picker_contrast_one";
					visible=false;
					color=app.fgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_contrast_one";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_contrast_one");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_contrast_one";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_contrast_one");
				};
			},
			{
				type="color";
				content={
					id="color_picker_contrast_two";
					visible=false;
					color=app.bgColor;
					newrow=true;
				};
			},
			{
				type="button";
				content={
					id="submit_color_foreground_picker_contrast_two";
					text=TEXTS.color.submit_color_foreground_picker.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_fg)("color_picker_contrast_two");
				};
			},
			{
				type="button";
				content={
					id="submit_color_background_picker_contrast_two";
					text=TEXTS.color.submit_color_background_picker.text;
					selected=false;
					newrow=true;
					visible=false;
					onclick=global_functions.set_color(global_functions.set_color_bg)("color_picker_contrast_two");
				};
			},
			{
				type="label";
				content={
					id="label_current_contrast";
					text=TEXTS.color.current_contrast.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="label";
				content={
					id="label_text_contrast";
					text=TEXTS.color.text_contrast.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="label";
				content={
					id="label_text_best_contrast";
					text=TEXTS.color.text_best_contrast.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="label";
				content={
					id="label_color_blind_contrast";
					text=TEXTS.color.color_blind_contrast.text;
					selected=false;
					newrow=true;
					visible=false;
				};
			},
			{
				type="button";
				content={
					id="submit_color_picker_contrast";
					text=TEXTS.color.submit_contrast.text;
					selected=false;
					newrow=false;
					visible=false;
					onclick=onClick_functions.submit_contrast;
				};
			},
		};
	};
end
