local Result = require 'luafp.Result'
local Ok = Result.Ok
local Error = Result.Error

describe("luafp/Result.lua", function()
    describe('Ok', function()
        it('should exist', function()
            assert.not_nil(Ok(1))
        end)
        it('should work with lists', function()
            assert.not_nil(Ok({1, 2}))
        end)
        it('should work with tables', function()
            assert.not_nil(Ok({firstName="Jesse", lastName="Warden"}))
        end)
        it('should equal Ok', function()
            assert.are.equal(Ok(1), Ok(1))
        end)
        it('should not equal Error', function()
            assert.are_not.equal(Ok(1), Error(1))
        end)
        it('should have same values', function()
            assert.True(Ok(1).value == Ok(1).value)
        end)
        it('should work with map', function()
            local add1 = function(o) return o + 1 end
            assert.are.equal(Ok(2), Ok(1):map(add1))
        end)
        it('should not get default value', function()
            assert.are.equal(1, Ok(1):getOrElse('cow'))
        end)
        it('should not do anything for orElse', function()
            local noop = function() end
            assert.are.equal(Ok(1), Ok(1):orElse(noop))
        end)
        it('should not do anything for mapError', function()
            local noop = function() end
            assert.are.equal(Ok(1), Ok(1):mapError(noop))
        end)
        it('should match with Ok', function()
            local result = Ok(1):matchWith({
                Error = function(tbl) return 'error' end,
                Ok = function(tbl) return tbl.value end
            })
            assert.are.equal(1, result)
        end)
        it('should chain 3 good operations', function()
            local chain1 = function(o) return Ok(o + 1) end
            local chain2 = function(o) return Ok(o + 1) end
            local chain3 = function(o) return Ok(o + 1) end
            assert.are.equal(Ok(4), Ok(1):chain(chain1):chain(chain2):chain(chain3))
        end)
        it('should error if first of 3 operations fails', function()
            local chain1 = function(o) return Error('boom') end
            local chain2 = function(o) return Ok(o + 1) end
            local chain3 = function(o) return Ok(o + 1) end
            assert.are.equal(Error('boom'), Ok(1):chain(chain1):chain(chain2):chain(chain3))
        end)
        it('should show helpful string', function()
            assert.are.equal('Result::Ok( 1 )', tostring(Ok(1)))
        end)
        it('should show helpful string for nil', function()
            assert.are.equal('Result::Ok( nil )', tostring(Ok(nil)))
        end)
        it('should show helpful string for list', function()
            assert.are.equal('Result::Ok( { 1:1 } )', tostring(Ok({1})))
        end)
        it('should have instance', function()
            assert.True(Ok:hasInstance(Ok(1)))
        end)
        it('should not have Error instance', function()
            assert.False(Ok:hasInstance(Error(1)))
        end)
        it('should not have nil instance', function()
            assert.False(Ok:hasInstance(nil))
        end)
        it('should give value with merge', function()
            assert.are.equal(1, Ok(1):merge())
        end)
    end)
    describe('Error', function()
        it('should exist', function()
            assert.not_nil(Error(1))
        end)
        it('should work with lists', function()
            assert.not_nil(Error({1, 2}))
        end)
        it('should work with tables', function()
            assert.not_nil(Error({firstName="Jesse", lastName="Warden"}))
        end)
        it('should equal eachother', function()
            assert.are.equal(Error('boom'), Error('boom'))
        end)
        it('should work with map', function()
            local add1 = function(o) return o + 1 end
            assert.are.equal(Error(2), Error(1):map(add1))
        end)
        it('should get default value', function()
            assert.are.equal('cow', Error(1):getOrElse('cow'))
        end)
        it('should run orElse', function()
            local getBoom = function() return 'boom' end
            assert.are.equal('boom', Error('cow'):orElse(getBoom))
        end)
        it('should mapError', function()
            local moarError = function(o) return o .. ' moaarrr error' end
            assert.are.equal(Error('pow moaarrr error'), Error('pow'):mapError(moarError))
        end)
        it('should match with Error', function()
            local result = Error(1):matchWith({
                Error = function(tbl) return 'error' end,
                Ok = function(tbl) return tbl.value end
            })
            assert.are.equal('error', result)
        end)
        it('should ignore 3 good chain operations', function()
            local chain1 = function(o) return Ok(o + 1) end
            local chain2 = function(o) return Ok(o + 1) end
            local chain3 = function(o) return Ok(o + 1) end
            assert.are.equal(Error('heh'), Error('heh'):chain(chain1):chain(chain2):chain(chain3))
        end)
        it('should give useful error string', function()
            assert.are.equal('Result::Error( boom )', tostring(Error('boom')))
        end)
        it('should give useful error string for nil', function()
            assert.are.equal('Result::Error( nil )', tostring(Error(nil)))
        end)
        it('should have Error instance', function()
            assert.True(Error:hasInstance(Error(1)))
        end)
        it('should not have Ok instance', function()
            assert.False(Error:hasInstance(Ok(1)))
        end)
        it('should not have nil instance', function()
            assert.False(Error:hasInstance(nil))
        end)
        it('merge should give value from Error', function()
            assert.are.equal('boom', Error('boom'):merge())
        end)
    end)
    describe('Result', function()
        describe('of', function()
            it('should give an Ok', function()
                assert.are.equal(Ok(1), Result:of(1))
            end)
        end)
        describe('fromNullable', function()
            it('should give an Error for nil', function()
                assert.are.equal(Error(nil), Result:fromNullable(nil))
            end)
            it('should give an Ok for 1', function()
                assert.are.equal(Ok(1), Result:fromNullable(1))
            end)
        end)
        describe('try', function()
            it('should give ok for ok add', function()
                local add = function(a, b) return a + b end
                local add2 = function() return add(1, 1) end
                assert.False(Error:hasInstance(Result:try(add2)))
            end)
            it('should give error for bad add', function()
                local add = function(a, b) return a + b end
                local add2 = function() return add(nil, 1) end
                assert.True(Error:hasInstance(Result:try(add2)))
            end)
        end)
    end)
end)

-- print(" ")
-- function itsOk()
--     return "we good"
-- end
-- function itsBoom()
--     return error('holy pow')
-- end
-- function itsYourBoom()
--     return error('holy pow', 2)
-- end
-- print(Result:try(itsOk))
-- print(Result:try(itsBoom))
-- print(Result:try(itsYourBoom))
