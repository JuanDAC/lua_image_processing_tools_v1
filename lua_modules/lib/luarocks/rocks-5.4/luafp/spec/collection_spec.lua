local collection = require 'luafp.collection'
local length = require 'luafp.array'.length
local reduce = collection.reduce
local every = collection.every
local some = collection.some

describe("src/collection.lua", function()
    describe('map', function()
        it('should give cow for raw', function()
            local result = collection.map(function() return 'cow' end)({'raw'})
            assert.are.same({'cow'}, result)
        end)
        it('should not give chicken for raw', function()
            local result = collection.map(function() return 'cow' end)({'raw'})
            assert.are_not.same({'chicken'}, result)
        end)
        it('should add nums for map ones', function()
            local add1 = function(i) return i + 1 end
            local result = collection.map(add1)({1, 2, 3})
            assert.are.same({2, 3, 4}, result)
        end)
        it('should fail if map gets a string function', function()
            local result = collection.map('dat')({'raw'})
            assert.is_nil(result)
        end)
        it('should fail if map gets a string list', function()
            local result = collection.map(function() return true end)('uber')
            assert.is_nil(result)
        end)
    end)
    describe('filter', function()
        it('should filter out cows', function()
            local isCow = function(o) return o == 'cow' end
            local result = collection.filter(isCow)({'a', 'cow', 'b'})
            assert.are.same({'cow'}, result)
        end)
        it('should filter out cows if there are none should be empty', function()
            local isCow = function(o) return o == 'cow' end
            local result = collection.filter(isCow)({'a', 'b', 'c'})
            assert.True(length(result) == 0)
        end)
        it('should fail if filter gets a string function', function()
            local result = collection.filter('dat')({'raw'})
            assert.is_nil(result)
        end)
        it('should fail if filter gets a string list', function()
            local result = collection.filter(function() return true end)('uber')
            assert.is_nil(result)
        end)
    end)
    describe('reduce', function()
        it('should do math', function()
            local sum = function(acc, o) return acc + o end
            local result = reduce(sum, 0, {1, 2, 3})
            assert.are.equal(6, result)
        end)
        it('should do nothing with empty list', function()
            local sum = function(acc, o) return acc + o end
            local result = reduce(sum, 0, {})
            assert.are.equal(0, result)
        end)
        it('should map array values if you so choose', function()
            local mapIt1 = function(acc, o)
                local cloned = {table.unpack(acc)}
                table.insert(cloned, o + 1)
                return cloned
            end
            local result = reduce(mapIt1, {}, {1, 2, 3})
            assert.are.same({2, 3, 4}, result)
        end)
        it('should string function', function()
            local result = reduce('func', 0, {1, 2, 3})
            assert.is_nil(result)
        end)
        it('should string list', function()
            local result = reduce(function() return end, 0, '{1, 2, 3}')
            assert.is_nil(result)
        end)
    end)
    describe('every', function()
        local is1 = function(o) return o == 1 end
        it('should be true for all 1', function()
            assert.True(every(is1, {1, 1, 1}))
        end)
        it('should be false for all 1, 2, 1', function()
            assert.False(every(is1, {1, 2, 1}))
        end)
        it('should be false for a nil predicate', function()
            assert.False(every(nil, {1, 2, 1}))
        end)
        it('should be false for a string list', function()
            assert.False(every(is1, '{1, 2, 1}'))
        end)
    end)
    describe('some', function()
        local is1 = function(o) return o == 1 end
        it('should be true for at least 1', function()
            assert.True(some(is1, {1, 2, 3}))
        end)
        it('should be false for 2, 2, 2', function()
            assert.False(some(is1, {2, 2, 2}))
        end)
        it('should be false for a nil predicate', function()
            assert.False(some(nil, {1, 2, 1}))
        end)
        it('should be false for a string list', function()
            assert.False(some(is1, '{1, 2, 1}'))
        end)
    end)
end)