local Maybe = require 'luafp.Maybe'
local Just = Maybe.Just
local Nothing = Maybe.Nothing

describe("luafp/Maybe.lua", function()
    describe('Just', function()
        local just1 = Just(1)
        it('should exist', function()
            assert.not_nil(just1)
        end)
        it('should have value of 1', function()
            assert.are.equal(1, just1.value)
        end)
        it('should get 1 instead of else', function()
            assert.are.equal(1, just1:getOrElse('cow'))
        end)
        it('should match against Just', function()
            local result = just1:matchWith({
                Just = function(tbl) return tbl.value end,
                Nothing = function() return 'nothing' end
            })
            assert.are.equal(1, result)
        end)
        it('should match another Just', function()
            assert.are.equal(Just(1), Just(1))
        end)
        it('should not match the value, only the type', function()
            assert.are_not.equal(Just(1), 1)
        end)
        it('should not equal Nothing', function()
            assert.are_not.equal(Just(1), Nothing())
        end)
        it('should have instance', function()
            assert.True(Just:hasInstance(just1))
        end)
        it('should not have nil instance', function()
            assert.False(Just:hasInstance(nil))
        end)
        it('should print helpful string', function()
            assert.are.equal(tostring(Just(1)), 'Maybe::Just( 1 )')
        end)
        it('should map the value, not the wrapper', function()
            local add1 = function(o) return o + 1 end
            assert.are.equal(Just(1):map(add1).value, 2)
        end)
        it('should chain', function()
            local add1 = function(o) return Just(o + 1) end
            assert.are.equal(Just(1):chain(add1), Just(2))
        end)
        it('should show error for nothing', function()
            local fail = function(o) return Nothing() end
            local result = Just(1):chain(fail)
            assert.are.equal('cow', result:getOrElse('cow'))
        end)
        it('should get self for orElse', function()
            local noop = function() end
            assert.are.equal(Just(1):orElse(noop), Just(1))
        end)
    end)
    describe('Nothing', function()
        local nothing = Nothing()
        it('should exist despite its name', function()
            assert.not_nil(nothing)
        end)
        it('should have no value', function()
            assert.is_nil(nothing.value)
        end)
        it('should get default value', function()
            assert.are.equal('cow', nothing:getOrElse('cow'))
        end)
        it('should match against nothing', function()
            local result = nothing:matchWith({
                Just = function(tbl) return tbl.value end,
                Nothing = function() return 'nothing' end
            })
            assert.are.equal('nothing', result)
        end)
        it('should equal Nothing', function()
            assert.are.equal(Nothing(), Nothing())
        end)
        it('should have instance', function()
            assert.True(Nothing:hasInstance(nothing))
        end)
        it('should have nil instance', function()
            assert.False(Nothing:hasInstance(nil))
        end)
        it('should not have Just inatance', function()
            assert.False(Nothing:hasInstance(Just(1)))
        end)
        it('should not be in a Just instance', function()
            assert.False(Just:hasInstance(nothing))
        end)
        it('should have a helpful string', function()
            assert.are.equal(tostring(Nothing()), 'Maybe::Nothing()')
        end)
        it('should map to nothing', function()
            local add1 = function(o) return o + 1 end
            assert.are.equal(Nothing():map(add1), Nothing())
        end)
        it('should chain to nothing', function()
            local justadd1chain = function(o) return Just(o + 1) end
            assert.are.equal(Nothing():chain(justadd1chain), Nothing())
        end)
        it('should run orElse', function()
            local result = function(o) return Just('back in black') end
            assert.are.equal(Nothing():orElse(result), Just('back in black'))
        end)
    end)
    describe('empty', function()
        it('should give you nothing', function()
            assert.are.equal(Nothing(), Maybe:empty())
        end)
    end)
    describe('of', function()
        it('should give you just', function()
            assert.are.equal(Just(1), Maybe:of(1))
        end)
    end)
    describe('fromNullable', function()
        it('should give you just if good', function()
            assert.are.equal(Just(1), Maybe:fromNullable(1))
        end)
        it('should give you nothing if nil', function()
            assert.are.equal(Nothing(), Maybe:fromNullable(nil))
        end)
    end)
end)