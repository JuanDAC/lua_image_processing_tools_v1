local array = require 'luafp.array'
local length = array.length
local indexOf = array.indexOf
local findIndex = array.findIndex
local find = array.find
local head = array.head
local last = array.last
local tail = array.tail
local initial = array.initial

describe("src/array.lua", function()
    describe('length', function()
        it('should work with basic list', function()
            assert.True(length({1, 2, 3}) == 3)
        end)
        it('should work with empty list', function()
            assert.True(length({}) == 0)
        end)
        it('should work with cow', function()
            assert.True(length('cow') == 0)
        end)
    end)
    describe('indexOf', function()
        it('should find an item in a list', function()
            assert.True(indexOf(1, 3, {1, 2, 3}) == 3)
        end)
        it('should find nothing in an empty list', function()
            assert.True(indexOf(1, 3, {}) == -1)
        end)
        it('should find nothing with a string start', function()
            assert.True(indexOf('1', 3, {}) == -1)
        end)
        it('should find nothing with a string list', function()
            assert.True(indexOf(1, 3, '{}') == -1)
        end)
    end)
    describe('findIndex', function()
        local is3 = function(o) return o == 3 end
        it('should find an item in a list', function()
            assert.True(findIndex(1, is3, {1, 2, 3}) == 3)
        end)
        it('should find nothing in an empty list', function()
            assert.True(findIndex(1, is3, {}) == -1)
        end)
        it('should find nothing with a string start', function()
            assert.True(findIndex('1', is3, {}) == -1)
        end)
        it('should find nothing with a string predicate', function()
            assert.True(findIndex(1, 'is3', {}) == -1)
        end)
        it('should find nothing with a string list', function()
            assert.True(findIndex(1, is3, '{}') == -1)
        end)
    end)
    describe('find', function()
        local is3 = function(o) return o == 3 end
        it('should find an item in a list', function()
            assert.True(find(1, is3, {1, 2, 3}) == 3)
        end)
        it('should find nothing in an empty list', function()
            assert.is_nil(find(1, is3, {}))
        end)
        it('should find nothing with a string start', function()
            assert.is_nil(find('1', is3, {}))
        end)
        it('should find nothing with a string predicate', function()
            assert.is_nil(find(1, 'is3', {}))
        end)
        it('should find nothing with a string list', function()
            assert.is_nil(find(1, is3, '{}'))
        end)
    end)
    describe('head', function()
        it('should find first item in list', function()
            assert.True(head({1, 2, 3}) == 1)
        end)
        it('should find nothing in an empty list', function()
            assert.is_nil(head({}))
        end)
        it('should find nothing in a string', function()
            assert.is_nil(head('wat'))
        end)
    end)
    describe('last', function()
        it('should find last item in list', function()
            assert.True(last({1, 2, 3}) == 3)
        end)
        it('should find nothing in an empty list', function()
            assert.is_nil(last({}))
        end)
        it('should find nothing in a string', function()
            assert.is_nil(last('wat'))
        end)
    end)
    describe('tail', function()
        it('should find tail items in list', function()
            assert.are.same(tail({1, 2, 3}), {2, 3})
        end)
        it('should find empty table in an empty list', function()
            assert.are.same(tail({}), {})
        end)
        it('should find nothing in a string', function()
            assert.are.same(tail('wat'), nil)
        end)
    end)
    describe('initial', function()
        it('should find initial items in list', function()
            assert.are.same(initial({1, 2, 3}), {1, 2})
        end)
        it('should find empty table in an empty list', function()
            assert.are.same(initial({}), {})
        end)
        it('should find nothing in a string', function()
            assert.are.same(initial('wat'), nil)
        end)
    end)
    describe('difference2', function()
        it('should find missing cow', function()
            local diff = array.difference2({'uno', 'dos', 'tres'})({'tres'})
            assert.are.same({'uno', 'dos'}, diff)
        end)
        it('should find missing cow uncurried', function()
            local diff = array.difference2({'uno', 'dos', 'tres'}, {'tres'})
            assert.are.same({'uno', 'dos'}, diff)
        end)
        it('should find nothing if first table is nil', function()
            local diff = array.difference2(nil, {'tres'})
            assert.is_nil(diff)
        end)
        it('should find nothing if first table is a string', function()
            local diff = array.difference2('wat', {'tres'})
            assert.is_nil(diff)
        end)
        it('should find nothing if second table is a string', function()
            local diff = array.difference2({'how', 'now'}, 'tres')
            assert.is_nil(diff)
        end)
    end)
    describe('fill', function()
        it('should fill a table with cow', function()
            local result = array.fill('cow')(1)(3)({})
            assert.are.same({'cow', 'cow', 'cow'}, result)
        end)
        it('should fill a table with cow even if filled with chicken', function()
            local MOORTTALLL_KOOMMMBATTT = {'chicken', 'Sub Zero'}
            local result = array.fill('cow')(3)(5)(MOORTTALLL_KOOMMMBATTT)
            assert.are.same({'chicken', 'Sub Zero', 'cow', 'cow', 'cow'}, result)
        end)
        it('should give just a table back for a nil start', function()
            local result = array.fill('cow', nil, 3, {})
            assert.is_nil(result)
        end)
        it('should give just a table back for a string start', function()
            local result = array.fill('cow', '1', 3, {})
            assert.is_nil(result)
        end)
        it('should give just a table back for a nil end', function()
            local result = array.fill('cow', 1, nil, {})
            assert.is_nil(result)
        end)
        it('should give just a table back for a string list', function()
            local result = array.fill('cow', 1, 3, 'wat')
            assert.is_nil(result)
        end)
        it('should give nil back if you attempt to fill it with nil', function()
            local result = array.fill(nil, 1, 3, {})
            assert.is_nil(result)
        end)
    end)
    describe('flatten', function()
        it('should flatten a basic list within list', function()
            local result = array.flatten({'a', 'b', {1, 2, 3}, 'c'})
            assert.are.same({'a', 'b', 1, 2, 3, 'c'}, result)
        end)
        it('should leave a basic list alone', function()
            local result = array.flatten({'a', 'b', 'c'})
            assert.are.same({'a', 'b', 'c'}, result)
        end)
        it('should leave a blank list alone', function()
            local result = array.flatten({})
            assert.are.same({}, result)
        end)
        it('should return nil if you send it a cow', function()
            local result = array.flatten('cow')
            assert.is_nil(result)
        end)
        it('should only go 1 level and not do insane recursion', function()
            local result = array.flatten({
                'a', 
                'b', 
                {
                    1, 
                    2, 
                    {'chicken', 'cow'}
                },
                3
            })
            assert.are.same({
                'a',
                'b',
                1,
                2,
                {'chicken', 'cow'},
                3
            }, result)
        end)
    end)
end)
